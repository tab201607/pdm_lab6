
Lab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000870  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070d  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  000012e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  9e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= 0b00000110; //Seleccionamos A6
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  d4:	80 81       	ld	r24, Z
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <__vector_21>:
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
	
}

ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	ADCResult = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADCResult+0x1>
  f4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADCResult>
	
	return;
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <writeUART>:

void writeUART(char senddata){ // Funcion para mandar un caracter por UART
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <writeUART>
	UDR0 = senddata; //Colocamos el valor a mandar
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <writeString>:
}

void writeString(char* senddata){ //Funcion para mandar varios datos
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio 
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	03 c0       	rjmp	.+6      	; 0x126 <writeString+0x12>
		writeUART(senddata[i]);
 120:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
	UDR0 = senddata; //Colocamos el valor a mandar
}

void writeString(char* senddata){ //Funcion para mandar varios datos
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio 
 124:	cf 5f       	subi	r28, 0xFF	; 255
 126:	f8 01       	movw	r30, r16
 128:	ec 0f       	add	r30, r28
 12a:	f1 1d       	adc	r31, r1
 12c:	80 81       	ld	r24, Z
 12e:	81 11       	cpse	r24, r1
 130:	f7 cf       	rjmp	.-18     	; 0x120 <writeString+0xc>
		writeUART(senddata[i]);
	}
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <__vector_18>:

ISR(USART_RX_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	receivedata = UDR0;
 148:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
	
	while(!(UCSR0A & (1<<UDRE0)));
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	85 ff       	sbrs	r24, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <__vector_18+0x16>
	
	UDR0 = receivedata;
 158:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	PORTD = receivedata<<5;
 15c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 160:	82 95       	swap	r24
 162:	88 0f       	add	r24, r24
 164:	80 7e       	andi	r24, 0xE0	; 224
 166:	8b b9       	out	0x0b, r24	; 11
	PORTB = (receivedata & 0b11111000)>>3;
 168:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 16c:	86 95       	lsr	r24
 16e:	86 95       	lsr	r24
 170:	86 95       	lsr	r24
 172:	85 b9       	out	0x05, r24	; 5
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <changesomebits>:

char changesomebits(char oldvalue, char bitstochange, char newvalue) //Funcion para solo cambiar algunos bits en un registro
{	char result = (newvalue & bitstochange) | (oldvalue & ~bitstochange);
 182:	96 2f       	mov	r25, r22
 184:	90 95       	com	r25
 186:	89 23       	and	r24, r25
 188:	64 23       	and	r22, r20
	return result;
 18a:	86 2b       	or	r24, r22
 18c:	08 95       	ret

0000018e <initUART9600>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

void initUART9600(void) {
	DDRD = changesomebits(DDRD, 0x03, (1<<DDD1)); // arreglamos d0 y d1
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	42 e0       	ldi	r20, 0x02	; 2
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 198:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 19a:	e0 ec       	ldi	r30, 0xC0	; 192
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // double speed
 1a0:	80 81       	ld	r24, Z
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 83       	st	Z, r24
	
	UCSR0B = 0;
 1a6:	e1 ec       	ldi	r30, 0xC1	; 193
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //RX con interrupt y TX encendido
 1ac:	80 81       	ld	r24, Z
 1ae:	88 69       	ori	r24, 0x98	; 152
 1b0:	80 83       	st	Z, r24
	
	UCSR0C = 0;
 1b2:	e2 ec       	ldi	r30, 0xC2	; 194
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	10 82       	st	Z, r1
	UCSR0C |= (1<< UCSZ01)|(1<<UCSZ00); //8 bits sin paridad con 1 bit de stop
 1b8:	80 81       	ld	r24, Z
 1ba:	86 60       	ori	r24, 0x06	; 6
 1bc:	80 83       	st	Z, r24
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
 1be:	8f ec       	ldi	r24, 0xCF	; 207
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1ca:	08 95       	ret

000001cc <setup>:
uint8_t receivedata = 0;
char string[] = "Hola mundo!\n";

void setup(void)
{
	cli();
 1cc:	f8 94       	cli
	
	initADC();
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	DDRD = 0b11100000; // Ponemos a D5-7 como salidas
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00011111; // Ponemos a B0-4 como salidas
 1d6:	8f e1       	ldi	r24, 0x1F	; 31
 1d8:	84 b9       	out	0x04, r24	; 4
	
	initUART9600();
 1da:	0e 94 c7 00 	call	0x18e	; 0x18e <initUART9600>
	
	sei();
 1de:	78 94       	sei
 1e0:	08 95       	ret

000001e2 <main>:
}

int main(void)
{
	setup();
 1e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup>
	PORTD = 0x80;
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	8b b9       	out	0x0b, r24	; 11
	
	writeString(string);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <main+0x10>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
