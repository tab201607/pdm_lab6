
Prelab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000731  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ab  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	ADMUX |= 0b00000110; //Seleccionamos A6
  a2:	80 81       	ld	r24, Z
  a4:	86 60       	ori	r24, 0x06	; 6
  a6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  be:	80 81       	ld	r24, Z
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <__vector_21>:
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
	
}

ISR(ADC_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	ADCResult = ADCH;
  d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ADCResult+0x1>
  de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCResult>
	
	return;
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <writeUART>:

void writeUART(char senddata){
	while(!(UCSR0A & (1<<UDRE0) ));
  f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f4:	95 ff       	sbrs	r25, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <writeUART>
	UDR0 = senddata; 
  f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fc:	08 95       	ret

000000fe <__vector_18>:
}

ISR(USART_RX_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	receivedata = UDR0;
 10c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 110:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while(!(UCSR0A & (1<<UDRE0)));
 114:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	85 ff       	sbrs	r24, 5
 11a:	fc cf       	rjmp	.-8      	; 0x114 <__vector_18+0x16>
	
	UDR0 = receivedata;
 11c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	PORTD = receivedata<<5;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	82 95       	swap	r24
 126:	88 0f       	add	r24, r24
 128:	80 7e       	andi	r24, 0xE0	; 224
 12a:	8b b9       	out	0x0b, r24	; 11
	PORTB = (receivedata & 0b11111000)>>3;
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	86 95       	lsr	r24
 132:	86 95       	lsr	r24
 134:	86 95       	lsr	r24
 136:	85 b9       	out	0x05, r24	; 5
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <changesomebits>:

char changesomebits(char oldvalue, char bitstochange, char newvalue) //Funcion para solo cambiar algunos bits en un registro
{	char result = (newvalue & bitstochange) | (oldvalue & ~bitstochange);
 146:	96 2f       	mov	r25, r22
 148:	90 95       	com	r25
 14a:	89 23       	and	r24, r25
 14c:	64 23       	and	r22, r20
	return result;
 14e:	86 2b       	or	r24, r22
 150:	08 95       	ret

00000152 <initUART9600>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

void initUART9600(void) {
	DDRD = changesomebits(DDRD, 0x03, (1<<DDD1)); // arreglamos d0 y d1
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	42 e0       	ldi	r20, 0x02	; 2
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	0e 94 a3 00 	call	0x146	; 0x146 <changesomebits>
 15c:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 15e:	e0 ec       	ldi	r30, 0xC0	; 192
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // double speed
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	
	UCSR0B = 0;
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //RX con interrupt y TX encendido
 170:	80 81       	ld	r24, Z
 172:	88 69       	ori	r24, 0x98	; 152
 174:	80 83       	st	Z, r24
	
	UCSR0C = 0;
 176:	e2 ec       	ldi	r30, 0xC2	; 194
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	10 82       	st	Z, r1
	UCSR0C |= (1<< UCSZ01)|(1<<UCSZ00); //8 bits sin paridad con 1 bit de stop
 17c:	80 81       	ld	r24, Z
 17e:	86 60       	ori	r24, 0x06	; 6
 180:	80 83       	st	Z, r24
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 18e:	08 95       	ret

00000190 <setup>:
uint16_t ADCResult = 0;
uint8_t receivedata = 0;

void setup(void)
{
	cli();
 190:	f8 94       	cli
	
	initADC();
 192:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	DDRD = 0b11100000; // Ponemos a D5-7 como salidas
 196:	80 ee       	ldi	r24, 0xE0	; 224
 198:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00011111; // Ponemos a B0-4 como salidas
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	84 b9       	out	0x04, r24	; 4
	
	initUART9600();
 19e:	0e 94 a9 00 	call	0x152	; 0x152 <initUART9600>
	
	sei();
 1a2:	78 94       	sei
 1a4:	08 95       	ret

000001a6 <main>:
}

int main(void)
{
	setup();
 1a6:	0e 94 c8 00 	call	0x190	; 0x190 <setup>
	PORTD = 0x80;
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		ADCSRA |= (1<<ADSC); //reiniciamos el ADC
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 83       	st	Z, r24
		writeUART('A');
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 78 00 	call	0xf0	; 0xf0 <writeUART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	81 ee       	ldi	r24, 0xE1	; 225
 1c2:	94 e0       	ldi	r25, 0x04	; 4
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x1e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x28>
 1ce:	00 00       	nop
 1d0:	ee cf       	rjmp	.-36     	; 0x1ae <main+0x8>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
