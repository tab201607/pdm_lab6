
Poslab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080016e  0080016e  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e6       	ldi	r26, 0x6E	; 110
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= 0b00000110; //Seleccionamos A6
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  d4:	80 81       	ld	r24, Z
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <__vector_21>:
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
	
}

ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	ADCResult = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <ADCResult+0x1>
  f4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <ADCResult>
	
	return;
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <writeUART>:

void writeUART(char senddata){ // Funcion para mandar un caracter por UART
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <writeUART>
	UDR0 = senddata; //Colocamos el valor a mandar
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <writeString>:
}

void writeString(char* senddata){ //Funcion para mandar varios datos
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	03 c0       	rjmp	.+6      	; 0x126 <writeString+0x12>
		writeUART(senddata[i]);
 120:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
	UDR0 = senddata; //Colocamos el valor a mandar
}

void writeString(char* senddata){ //Funcion para mandar varios datos
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio
 124:	cf 5f       	subi	r28, 0xFF	; 255
 126:	f8 01       	movw	r30, r16
 128:	ec 0f       	add	r30, r28
 12a:	f1 1d       	adc	r31, r1
 12c:	80 81       	ld	r24, Z
 12e:	81 11       	cpse	r24, r1
 130:	f7 cf       	rjmp	.-18     	; 0x120 <writeString+0xc>
		writeUART(senddata[i]);
	}
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <__vector_18>:

ISR(USART_RX_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	receivedata = UDR0;
 148:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <receivedata>
	
	while(!(UCSR0A & (1<<UDRE0)));
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	85 ff       	sbrs	r24, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <__vector_18+0x16>
	
	UDR0 = receivedata;
 158:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (mode == 1) {// si estamos en modo desplegando menu
 15c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <__vector_18+0x44>
		if (receivedata == 0x31) {mode = 2;} //pasamos al modo desplegar pot
 164:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <receivedata>
 168:	81 33       	cpi	r24, 0x31	; 49
 16a:	19 f4       	brne	.+6      	; 0x172 <__vector_18+0x38>
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <__data_end>
		if (receivedata == 0x32) {mode = 3;} //pasamos al modo esperar caracter
 172:	82 33       	cpi	r24, 0x32	; 50
 174:	a1 f4       	brne	.+40     	; 0x19e <__vector_18+0x64>
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
 17c:	10 c0       	rjmp	.+32     	; 0x19e <__vector_18+0x64>
			}
	else if (mode == 4) { //recibiendo un valor ASCII
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	71 f4       	brne	.+28     	; 0x19e <__vector_18+0x64>
		PORTD = receivedata<<5;
 182:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <receivedata>
 186:	82 95       	swap	r24
 188:	88 0f       	add	r24, r24
 18a:	80 7e       	andi	r24, 0xE0	; 224
 18c:	8b b9       	out	0x0b, r24	; 11
		PORTB = (receivedata & 0b11111000)>>3;
 18e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <receivedata>
 192:	86 95       	lsr	r24
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
 198:	85 b9       	out	0x05, r24	; 5
		mode = 0; // desplegamos el menu de nuevo
 19a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
	}
	
}
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <changesomebits>:

char changesomebits(char oldvalue, char bitstochange, char newvalue) //Funcion para solo cambiar algunos bits en un registro
{	char result = (newvalue & bitstochange) | (oldvalue & ~bitstochange);
 1ac:	96 2f       	mov	r25, r22
 1ae:	90 95       	com	r25
 1b0:	89 23       	and	r24, r25
 1b2:	64 23       	and	r22, r20
	return result;
 1b4:	86 2b       	or	r24, r22
 1b6:	08 95       	ret

000001b8 <initUART9600>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

void initUART9600(void) {
	DDRD = changesomebits(DDRD, 0x03, (1<<DDD1)); // arreglamos d0 y d1
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	42 e0       	ldi	r20, 0x02	; 2
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <changesomebits>
 1c2:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 1c4:	e0 ec       	ldi	r30, 0xC0	; 192
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // double speed
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
	
	UCSR0B = 0;
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //RX con interrupt y TX encendido
 1d6:	80 81       	ld	r24, Z
 1d8:	88 69       	ori	r24, 0x98	; 152
 1da:	80 83       	st	Z, r24
	
	UCSR0C = 0;
 1dc:	e2 ec       	ldi	r30, 0xC2	; 194
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	10 82       	st	Z, r1
	UCSR0C |= (1<< UCSZ01)|(1<<UCSZ00); //8 bits sin paridad con 1 bit de stop
 1e2:	80 81       	ld	r24, Z
 1e4:	86 60       	ori	r24, 0x06	; 6
 1e6:	80 83       	st	Z, r24
	
	UBRR0 = 207; //Baud rate de 9600 para prescaler de 16MHz
 1e8:	8f ec       	ldi	r24, 0xCF	; 207
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1f4:	08 95       	ret

000001f6 <setup>:
char asciitime[] = "Envia el caracter ASCII que quieras desplegar \n";
char valorpot[]= "Valor ADC:";

void setup(void)
{
	cli();
 1f6:	f8 94       	cli
	
	initADC();
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	DDRD = 0b11100000; // Ponemos a D5-7 como salidas
 1fc:	80 ee       	ldi	r24, 0xE0	; 224
 1fe:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00011111; // Ponemos a B0-4 como salidas
 200:	8f e1       	ldi	r24, 0x1F	; 31
 202:	84 b9       	out	0x04, r24	; 4
	
	initUART9600();
 204:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initUART9600>
	
	sei();
 208:	78 94       	sei
 20a:	08 95       	ret

0000020c <main>:
}

int main(void)
{
	setup();
 20c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup>
	PORTD = 0x80;
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		ADCSRA |= (1<<ADSC);
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
		// mostramos el menu
		if (mode == 0) {writeString(menu);
 21e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 222:	81 11       	cpse	r24, r1
 224:	0a c0       	rjmp	.+20     	; 0x23a <main+0x2e>
 226:	8b e3       	ldi	r24, 0x3B	; 59
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		mode++;}
 22e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
 238:	ed cf       	rjmp	.-38     	; 0x214 <main+0x8>
		
		//desplegamos valor del pot
		else if (mode == 2) {
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	09 f0       	breq	.+2      	; 0x240 <main+0x34>
 23e:	79 c0       	rjmp	.+242    	; 0x332 <main+0x126>
		writeUART(10);
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
		writeString(valorpot); 
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeUART(ADCResult/100 + 0x30); // desplegar cienes
 24e:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <ADCResult>
 252:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <ADCResult+0x1>
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	36 95       	lsr	r19
 25c:	27 95       	ror	r18
 25e:	ab e7       	ldi	r26, 0x7B	; 123
 260:	b4 e1       	ldi	r27, 0x14	; 20
 262:	0e 94 a9 01 	call	0x352	; 0x352 <__umulhisi3>
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
		writeUART((ADCResult % 100)/10 + 0x30); // desplegar decenas
 270:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <ADCResult>
 274:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <ADCResult+0x1>
 278:	9a 01       	movw	r18, r20
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	ab e7       	ldi	r26, 0x7B	; 123
 284:	b4 e1       	ldi	r27, 0x14	; 20
 286:	0e 94 a9 01 	call	0x352	; 0x352 <__umulhisi3>
 28a:	9c 01       	movw	r18, r24
 28c:	36 95       	lsr	r19
 28e:	27 95       	ror	r18
 290:	c4 e6       	ldi	r28, 0x64	; 100
 292:	c2 9f       	mul	r28, r18
 294:	c0 01       	movw	r24, r0
 296:	c3 9f       	mul	r28, r19
 298:	90 0d       	add	r25, r0
 29a:	11 24       	eor	r1, r1
 29c:	9a 01       	movw	r18, r20
 29e:	28 1b       	sub	r18, r24
 2a0:	39 0b       	sbc	r19, r25
 2a2:	ad ec       	ldi	r26, 0xCD	; 205
 2a4:	bc ec       	ldi	r27, 0xCC	; 204
 2a6:	0e 94 a9 01 	call	0x352	; 0x352 <__umulhisi3>
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
		writeUART((ADCResult % 100) % 10 + 0x30); //desplegar unidades
 2bc:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <ADCResult>
 2c0:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <ADCResult+0x1>
 2c4:	9f 01       	movw	r18, r30
 2c6:	36 95       	lsr	r19
 2c8:	27 95       	ror	r18
 2ca:	36 95       	lsr	r19
 2cc:	27 95       	ror	r18
 2ce:	ab e7       	ldi	r26, 0x7B	; 123
 2d0:	b4 e1       	ldi	r27, 0x14	; 20
 2d2:	0e 94 a9 01 	call	0x352	; 0x352 <__umulhisi3>
 2d6:	ac 01       	movw	r20, r24
 2d8:	56 95       	lsr	r21
 2da:	47 95       	ror	r20
 2dc:	c4 9f       	mul	r28, r20
 2de:	c0 01       	movw	r24, r0
 2e0:	c5 9f       	mul	r28, r21
 2e2:	90 0d       	add	r25, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	af 01       	movw	r20, r30
 2e8:	48 1b       	sub	r20, r24
 2ea:	59 0b       	sbc	r21, r25
 2ec:	9a 01       	movw	r18, r20
 2ee:	ad ec       	ldi	r26, 0xCD	; 205
 2f0:	bc ec       	ldi	r27, 0xCC	; 204
 2f2:	0e 94 a9 01 	call	0x352	; 0x352 <__umulhisi3>
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	9c 01       	movw	r18, r24
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	82 0f       	add	r24, r18
 316:	93 1f       	adc	r25, r19
 318:	9a 01       	movw	r18, r20
 31a:	28 1b       	sub	r18, r24
 31c:	39 0b       	sbc	r19, r25
 31e:	c9 01       	movw	r24, r18
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
		writeUART(10); 
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
		mode = 0;
 32c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
 330:	71 cf       	rjmp	.-286    	; 0x214 <main+0x8>
		}
		
		//Esperamos al car a desplegar
		else if (mode == 3) {
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	09 f0       	breq	.+2      	; 0x338 <main+0x12c>
 336:	6e cf       	rjmp	.-292    	; 0x214 <main+0x8>
			writeUART(10);
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
			writeString(asciitime);
 33e:	8b e0       	ldi	r24, 0x0B	; 11
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
			mode++;
 346:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
 350:	61 cf       	rjmp	.-318    	; 0x214 <main+0x8>

00000352 <__umulhisi3>:
 352:	a2 9f       	mul	r26, r18
 354:	b0 01       	movw	r22, r0
 356:	b3 9f       	mul	r27, r19
 358:	c0 01       	movw	r24, r0
 35a:	a3 9f       	mul	r26, r19
 35c:	70 0d       	add	r23, r0
 35e:	81 1d       	adc	r24, r1
 360:	11 24       	eor	r1, r1
 362:	91 1d       	adc	r25, r1
 364:	b2 9f       	mul	r27, r18
 366:	70 0d       	add	r23, r0
 368:	81 1d       	adc	r24, r1
 36a:	11 24       	eor	r1, r1
 36c:	91 1d       	adc	r25, r1
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
